import {
    Add as AddIcon,
    Backup as BackupIcon,
    Business as BusinessIcon,
    Delete as DeleteIcon,
    Download as DownloadIcon,
    Group as GroupIcon,
    Lock as LockIcon,
    AttachMoney as MoneyIcon,
    Palette as PaletteIcon,
    Restore as RestoreIcon,
    Save as SaveIcon,
    Security as SecurityIcon,
    Settings as SettingsIcon,
    Storage as StorageIcon,
    Visibility as VisibilityIcon,
    VisibilityOff as VisibilityOffIcon,
    VolumeUp as VolumeIcon
} from '@mui/icons-material';
import {
    Alert,
    Avatar,
    Box,
    Button,
    Card,
    CardContent,
    Dialog,
    DialogActions,
    DialogContent,
    DialogTitle,
    Divider,
    FormControl,
    FormControlLabel,
    Grid,
    IconButton,
    InputLabel,
    MenuItem,
    Paper,
    Select,
    Slider,
    Snackbar,
    Switch,
    Tab,
    Tabs,
    TextField,
    Typography
} from '@mui/material';
import { saveAs } from 'file-saver';
import React, { useEffect, useState } from 'react';

interface FacilityInfo {
    name: string;
    address: string;
    phone: string;
    email: string;
    logo?: string;
    description?: string;
}

interface GroupSettings {
    groupName: string;
    color: string;
    defaultPrice: number;
    displayOrder: number;
    isActive: boolean;
    maxUsers?: number;
}

interface PriceSettings {
    defaultPrice: number;
    trialPrice: number;
    discountRate: number;
    taxRate: number;
}

interface SecuritySettings {
    adminPassword: string;
    autoLockoutMinutes: number;
    enableTwoFactor: boolean;
    passwordMinLength: number;
    sessionTimeout: number;
}

interface DisplaySettings {
    theme: 'light' | 'dark' | 'high-contrast';
    fontSize: 'small' | 'medium' | 'large' | 'xl';
    language: 'ja' | 'en';
    enableSounds: boolean;
    enableAnimations: boolean;
    compactMode: boolean;
}

interface SettingsProps {
    appData?: any;
    onUpdateSettings?: (settings: any) => void;
    onExportData?: () => string;
    onImportData?: (data: string) => void;
    onClearData?: () => void;
    onBack?: () => void;
}

interface TabPanelProps {
    children?: React.ReactNode;
    index: number;
    value: number;
}

function TabPanel(props: TabPanelProps) {
    const { children, value, index, ...other } = props;
    return (
        <div role="tabpanel" hidden={value !== index} {...other}>
            {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
        </div>
    );
}

const Settings: React.FC<SettingsProps> = ({
    appData,
    onUpdateSettings,
    onExportData,
    onImportData,
    onClearData,
    onBack
}) => {
    const [tabValue, setTabValue] = useState(0);
    const [facilityInfo, setFacilityInfo] = useState<FacilityInfo>({
        name: 'あおば障害者支援事業所',
        address: '〒123-4567 東京都あおば区...',
        phone: '03-1234-5678',
        email: 'info@aoba-facility.jp',
        description: '利用者の皆様の自立支援を目指す事業所です。'
    });

    const [groupSettings, setGroupSettings] = useState<GroupSettings[]>([
        { groupName: 'グループA', color: '#1976d2', defaultPrice: 400, displayOrder: 1, isActive: true, maxUsers: 20 },
        { groupName: 'グループB', color: '#388e3c', defaultPrice: 450, displayOrder: 2, isActive: true, maxUsers: 15 },
        { groupName: 'グループC', color: '#f57c00', defaultPrice: 400, displayOrder: 3, isActive: true, maxUsers: 18 },
        { groupName: 'グループD', color: '#7b1fa2', defaultPrice: 500, displayOrder: 4, isActive: true, maxUsers: 12 }
    ]);

    const [priceSettings, setPriceSettings] = useState<PriceSettings>({
        defaultPrice: 400,
        trialPrice: 0,
        discountRate: 0,
        taxRate: 10
    });

    const [securitySettings, setSecuritySettings] = useState<SecuritySettings>({
        adminPassword: '',
        autoLockoutMinutes: 30,
        enableTwoFactor: false,
        passwordMinLength: 4,
        sessionTimeout: 60
    });

    const [displaySettings, setDisplaySettings] = useState<DisplaySettings>({
        theme: 'light',
        fontSize: 'medium',
        language: 'ja',
        enableSounds: true,
        enableAnimations: true,
        compactMode: false
    });

    const [snackbar, setSnackbar] = useState({
        open: false,
        message: '',
        severity: 'info' as 'success' | 'error' | 'info' | 'warning'
    });

    const [passwordDialog, setPasswordDialog] = useState({ open: false, currentPassword: '', newPassword: '', confirmPassword: '' });
    const [backupDialog, setBackupDialog] = useState({ open: false, type: '' });
    const [showPassword, setShowPassword] = useState(false);

    // Save all settings
    const handleSaveSettings = () => {
        const allSettings = {
            facilityInfo,
            groupSettings,
            priceSettings,
            securitySettings,
            displaySettings,
            lastUpdated: new Date().toISOString()
        };

        onUpdateSettings?.(allSettings);

        setSnackbar({
            open: true,
            message: '設定を保存しました',
            severity: 'success'
        });
    };

    // Facility info handlers
    const handleFacilityInfoChange = (field: keyof FacilityInfo, value: string) => {
        setFacilityInfo(prev => ({ ...prev, [field]: value }));
    };

    // Group settings handlers
    const handleAddGroup = () => {
        const newGroup: GroupSettings = {
            groupName: `グループ${String.fromCharCode(65 + groupSettings.length)}`,
            color: '#2196f3',
            defaultPrice: 400,
            displayOrder: groupSettings.length + 1,
            isActive: true,
            maxUsers: 20
        };
        setGroupSettings([...groupSettings, newGroup]);
    };

    const handleUpdateGroup = (index: number, updates: Partial<GroupSettings>) => {
        setGroupSettings(prev => prev.map((group, i) =>
            i === index ? { ...group, ...updates } : group
        ));
    };

    const handleDeleteGroup = (index: number) => {
        if (window.confirm('このグループを削除しますか？')) {
            setGroupSettings(prev => prev.filter((_, i) => i !== index));
        }
    };

    // Password change handler
    const handlePasswordChange = () => {
        if (passwordDialog.newPassword !== passwordDialog.confirmPassword) {
            setSnackbar({
                open: true,
                message: 'パスワードが一致しません',
                severity: 'error'
            });
            return;
        }

        if (passwordDialog.newPassword.length < securitySettings.passwordMinLength) {
            setSnackbar({
                open: true,
                message: `パスワードは${securitySettings.passwordMinLength}文字以上で設定してください`,
                severity: 'error'
            });
            return;
        }

        setSecuritySettings(prev => ({ ...prev, adminPassword: passwordDialog.newPassword }));
        setPasswordDialog({ open: false, currentPassword: '', newPassword: '', confirmPassword: '' });

        setSnackbar({
            open: true,
            message: '管理者パスワードを変更しました',
            severity: 'success'
        });
    };

    // Data management handlers
    const handleCreateBackup = () => {
        const backupData = {
            facilityInfo,
            groupSettings,
            priceSettings,
            securitySettings: { ...securitySettings, adminPassword: '' }, // パスワードは除外
            displaySettings,
            appData,
            createdAt: new Date().toISOString(),
            version: '1.0'
        };

        const blob = new Blob([JSON.stringify(backupData, null, 2)], { type: 'application/json' });
        saveAs(blob, `aoba-backup-${new Date().toISOString().split('T')[0]}.json`);

        setSnackbar({
            open: true,
            message: 'バックアップファイルを作成しました',
            severity: 'success'
        });
    };

    const handleRestoreBackup = (event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const backupData = JSON.parse(e.target?.result as string);

                // Validate backup data structure
                if (!backupData.facilityInfo || !backupData.groupSettings) {
                    throw new Error('Invalid backup file format');
                }

                // Restore settings
                setFacilityInfo(backupData.facilityInfo);
                setGroupSettings(backupData.groupSettings);
                setPriceSettings(backupData.priceSettings || priceSettings);
                setDisplaySettings(backupData.displaySettings || displaySettings);

                if (backupData.appData) {
                    onImportData?.(JSON.stringify(backupData.appData));
                }

                setSnackbar({
                    open: true,
                    message: 'バックアップから復元しました',
                    severity: 'success'
                });

            } catch (error) {
                setSnackbar({
                    open: true,
                    message: 'バックアップファイルの復元に失敗しました',
                    severity: 'error'
                });
            }
        };
        reader.readAsText(file);

        // Reset file input
        event.target.value = '';
    };

    const handleClearAllData = () => {
        if (window.confirm('すべてのデータを削除しますか？この操作は取り消せません。')) {
            if (window.confirm('本当にすべてのデータを削除しますか？')) {
                onClearData?.();
                setSnackbar({
                    open: true,
                    message: 'すべてのデータを削除しました',
                    severity: 'info'
                });
            }
        }
    };

    // Theme application
    useEffect(() => {
        document.documentElement.setAttribute('data-theme', displaySettings.theme);
        document.documentElement.setAttribute('data-font-size', displaySettings.fontSize);
    }, [displaySettings.theme, displaySettings.fontSize]);

    const renderFacilityTab = () => (
        <Box>
            <Typography variant="h6" sx={{ mb: 3 }}>
                <BusinessIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                事業所基本情報
            </Typography>

            <Grid container spacing={3}>
                <Grid item xs={12} md={6}>
                    <Card>
                        <CardContent>
                            <Typography variant="h6" sx={{ mb: 2 }}>基本情報</Typography>

                            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                                <TextField
                                    label="事業所名"
                                    value={facilityInfo.name}
                                    onChange={(e) => handleFacilityInfoChange('name', e.target.value)}
                                    fullWidth
                                />

                                <TextField
                                    label="住所"
                                    value={facilityInfo.address}
                                    onChange={(e) => handleFacilityInfoChange('address', e.target.value)}
                                    fullWidth
                                    multiline
                                    rows={2}
                                />

                                <TextField
                                    label="電話番号"
                                    value={facilityInfo.phone}
                                    onChange={(e) => handleFacilityInfoChange('phone', e.target.value)}
                                    fullWidth
                                />

                                <TextField
                                    label="メールアドレス"
                                    type="email"
                                    value={facilityInfo.email}
                                    onChange={(e) => handleFacilityInfoChange('email', e.target.value)}
                                    fullWidth
                                />

                                <TextField
                                    label="事業所説明"
                                    value={facilityInfo.description}
                                    onChange={(e) => handleFacilityInfoChange('description', e.target.value)}
                                    fullWidth
                                    multiline
                                    rows={3}
                                />
                            </Box>
                        </CardContent>
                    </Card>
                </Grid>

                <Grid item xs={12} md={6}>
                    <Card>
                        <CardContent>
                            <Typography variant="h6" sx={{ mb: 2 }}>ロゴ・画像設定</Typography>

                            <Box sx={{ textAlign: 'center', mb: 2 }}>
                                <Avatar
                                    sx={{
                                        width: 120,
                                        height: 120,
                                        mx: 'auto',
                                        mb: 2,
                                        bgcolor: 'primary.main',
                                        fontSize: '3rem'
                                    }}
                                >
                                    {facilityInfo.name.charAt(0)}
                                </Avatar>

                                <Button variant="outlined" component="label">
                                    ロゴを変更
                                    <input type="file" hidden accept="image/*" />
                                </Button>
                            </Box>

                            <Alert severity="info">
                                ロゴ画像は今後の機能追加で対応予定です。
                            </Alert>
                        </CardContent>
                    </Card>
                </Grid>
            </Grid>
        </Box>
    );

    const renderGroupTab = () => (
        <Box>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
                <Typography variant="h6">
                    <GroupIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                    グループ設定
                </Typography>
                <Button variant="contained" startIcon={<AddIcon />} onClick={handleAddGroup}>
                    グループ追加
                </Button>
            </Box>

            <Grid container spacing={2}>
                {groupSettings.map((group, index) => (
                    <Grid item xs={12} md={6} key={index}>
                        <Card>
                            <CardContent>
                                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                                    <Box
                                        sx={{
                                            width: 24,
                                            height: 24,
                                            borderRadius: '50%',
                                            backgroundColor: group.color,
                                            mr: 2
                                        }}
                                    />
                                    <TextField
                                        label="グループ名"
                                        value={group.groupName}
                                        onChange={(e) => handleUpdateGroup(index, { groupName: e.target.value })}
                                        size="small"
                                        sx={{ flex: 1 }}
                                    />
                                    <IconButton
                                        color="error"
                                        onClick={() => handleDeleteGroup(index)}
                                        sx={{ ml: 1 }}
                                    >
                                        <DeleteIcon />
                                    </IconButton>
                                </Box>

                                <Grid container spacing={2}>
                                    <Grid item xs={6}>
                                        <TextField
                                            label="カラーコード"
                                            value={group.color}
                                            onChange={(e) => handleUpdateGroup(index, { color: e.target.value })}
                                            size="small"
                                            fullWidth
                                            InputProps={{
                                                startAdornment: (
                                                    <input
                                                        type="color"
                                                        value={group.color}
                                                        onChange={(e) => handleUpdateGroup(index, { color: e.target.value })}
                                                        style={{ width: 30, height: 30, border: 'none', borderRadius: 4 }}
                                                    />
                                                )
                                            }}
                                        />
                                    </Grid>

                                    <Grid item xs={6}>
                                        <TextField
                                            label="デフォルト料金"
                                            type="number"
                                            value={group.defaultPrice}
                                            onChange={(e) => handleUpdateGroup(index, { defaultPrice: Number(e.target.value) })}
                                            size="small"
                                            fullWidth
                                            InputProps={{ startAdornment: '¥' }}
                                        />
                                    </Grid>

                                    <Grid item xs={6}>
                                        <TextField
                                            label="表示順"
                                            type="number"
                                            value={group.displayOrder}
                                            onChange={(e) => handleUpdateGroup(index, { displayOrder: Number(e.target.value) })}
                                            size="small"
                                            fullWidth
                                        />
                                    </Grid>

                                    <Grid item xs={6}>
                                        <TextField
                                            label="最大利用者数"
                                            type="number"
                                            value={group.maxUsers}
                                            onChange={(e) => handleUpdateGroup(index, { maxUsers: Number(e.target.value) })}
                                            size="small"
                                            fullWidth
                                        />
                                    </Grid>
                                </Grid>

                                <FormControlLabel
                                    control={
                                        <Switch
                                            checked={group.isActive}
                                            onChange={(e) => handleUpdateGroup(index, { isActive: e.target.checked })}
                                        />
                                    }
                                    label="有効"
                                    sx={{ mt: 1 }}
                                />
                            </CardContent>
                        </Card>
                    </Grid>
                ))}
            </Grid>
        </Box>
    );

    const renderPriceTab = () => (
        <Box>
            <Typography variant="h6" sx={{ mb: 3 }}>
                <MoneyIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                料金設定
            </Typography>

            <Grid container spacing={3}>
                <Grid item xs={12} md={6}>
                    <Card>
                        <CardContent>
                            <Typography variant="h6" sx={{ mb: 2 }}>基本料金設定</Typography>

                            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                                <TextField
                                    label="デフォルト料金"
                                    type="number"
                                    value={priceSettings.defaultPrice}
                                    onChange={(e) => setPriceSettings(prev => ({
                                        ...prev,
                                        defaultPrice: Number(e.target.value)
                                    }))}
                                    InputProps={{ startAdornment: '¥', endAdornment: '円' }}
                                    fullWidth
                                />

                                <TextField
                                    label="お試しユーザー料金"
                                    type="number"
                                    value={priceSettings.trialPrice}
                                    onChange={(e) => setPriceSettings(prev => ({
                                        ...prev,
                                        trialPrice: Number(e.target.value)
                                    }))}
                                    InputProps={{ startAdornment: '¥', endAdornment: '円' }}
                                    fullWidth
                                />

                                <TextField
                                    label="割引率"
                                    type="number"
                                    value={priceSettings.discountRate}
                                    onChange={(e) => setPriceSettings(prev => ({
                                        ...prev,
                                        discountRate: Number(e.target.value)
                                    }))}
                                    InputProps={{ endAdornment: '%' }}
                                    fullWidth
                                />

                                <TextField
                                    label="消費税率"
                                    type="number"
                                    value={priceSettings.taxRate}
                                    onChange={(e) => setPriceSettings(prev => ({
                                        ...prev,
                                        taxRate: Number(e.target.value)
                                    }))}
                                    InputProps={{ endAdornment: '%' }}
                                    fullWidth
                                />
                            </Box>
                        </CardContent>
                    </Card>
                </Grid>

                <Grid item xs={12} md={6}>
                    <Card>
                        <CardContent>
                            <Typography variant="h6" sx={{ mb: 2 }}>料金シミュレーション</Typography>

                            <Box sx={{ p: 2, bgcolor: 'grey.100', borderRadius: 1 }}>
                                <Typography variant="body2" sx={{ mb: 1 }}>
                                    基本料金: ¥{priceSettings.defaultPrice.toLocaleString()}
                                </Typography>
                                <Typography variant="body2" sx={{ mb: 1 }}>
                                    割引適用: -¥{Math.round(priceSettings.defaultPrice * priceSettings.discountRate / 100).toLocaleString()}
                                </Typography>
                                <Typography variant="body2" sx={{ mb: 1 }}>
                                    税込価格: ¥{Math.round((priceSettings.defaultPrice - priceSettings.defaultPrice * priceSettings.discountRate / 100) * (1 + priceSettings.taxRate / 100)).toLocaleString()}
                                </Typography>
                                <Divider sx={{ my: 1 }} />
                                <Typography variant="h6" color="primary">
                                    実際の支払額: ¥{Math.round((priceSettings.defaultPrice - priceSettings.defaultPrice * priceSettings.discountRate / 100) * (1 + priceSettings.taxRate / 100)).toLocaleString()}
                                </Typography>
                            </Box>

                            <Alert severity="info" sx={{ mt: 2 }}>
                                お試しユーザーの料金: ¥{priceSettings.trialPrice.toLocaleString()}
                            </Alert>
                        </CardContent>
                    </Card>
                </Grid>
            </Grid>
        </Box>
    );

    const renderSecurityTab = () => (
        <Box>
            <Typography variant="h6" sx={{ mb: 3 }}>
                <SecurityIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                セキュリティ設定
            </Typography>

            <Grid container spacing={3}>
                <Grid item xs={12} md={6}>
                    <Card>
                        <CardContent>
                            <Typography variant="h6" sx={{ mb: 2 }}>パスワード設定</Typography>

                            <Box sx={{ mb: 2 }}>
                                <Button
                                    variant="outlined"
                                    startIcon={<LockIcon />}
                                    onClick={() => setPasswordDialog({ ...passwordDialog, open: true })}
                                    fullWidth
                                >
                                    管理者パスワードを変更
                                </Button>
                            </Box>

                            <TextField
                                label="パスワード最小文字数"
                                type="number"
                                value={securitySettings.passwordMinLength}
                                onChange={(e) => setSecuritySettings(prev => ({
                                    ...prev,
                                    passwordMinLength: Number(e.target.value)
                                }))}
                                fullWidth
                                inputProps={{ min: 1, max: 20 }}
                            />
                        </CardContent>
                    </Card>
                </Grid>

                <Grid item xs={12} md={6}>
                    <Card>
                        <CardContent>
                            <Typography variant="h6" sx={{ mb: 2 }}>セッション設定</Typography>

                            <Box sx={{ mb: 2 }}>
                                <Typography variant="body2" sx={{ mb: 1 }}>
                                    自動ロックアウト: {securitySettings.autoLockoutMinutes}分
                                </Typography>
                                <Slider
                                    value={securitySettings.autoLockoutMinutes}
                                    onChange={(_, value) => setSecuritySettings(prev => ({
                                        ...prev,
                                        autoLockoutMinutes: value as number
                                    }))}
                                    min={5}
                                    max={120}
                                    step={5}
                                    marks={[
                                        { value: 5, label: '5分' },
                                        { value: 30, label: '30分' },
                                        { value: 60, label: '1時間' },
                                        { value: 120, label: '2時間' }
                                    ]}
                                />
                            </Box>

                            <Box sx={{ mb: 2 }}>
                                <Typography variant="body2" sx={{ mb: 1 }}>
                                    セッションタイムアウト: {securitySettings.sessionTimeout}分
                                </Typography>
                                <Slider
                                    value={securitySettings.sessionTimeout}
                                    onChange={(_, value) => setSecuritySettings(prev => ({
                                        ...prev,
                                        sessionTimeout: value as number
                                    }))}
                                    min={10}
                                    max={240}
                                    step={10}
                                    marks={[
                                        { value: 10, label: '10分' },
                                        { value: 60, label: '1時間' },
                                        { value: 120, label: '2時間' },
                                        { value: 240, label: '4時間' }
                                    ]}
                                />
                            </Box>

                            <FormControlLabel
                                control={
                                    <Switch
                                        checked={securitySettings.enableTwoFactor}
                                        onChange={(e) => setSecuritySettings(prev => ({
                                            ...prev,
                                            enableTwoFactor: e.target.checked
                                        }))}
                                    />
                                }
                                label="二要素認証（今後実装予定）"
                                disabled
                            />
                        </CardContent>
                    </Card>
                </Grid>
            </Grid>
        </Box>
    );

    const renderDataTab = () => (
        <Box>
            <Typography variant="h6" sx={{ mb: 3 }}>
                <StorageIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                データ管理
            </Typography>

            <Grid container spacing={3}>
                <Grid item xs={12} md={6}>
                    <Card>
                        <CardContent>
                            <Typography variant="h6" sx={{ mb: 2 }}>バックアップ・復元</Typography>

                            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                                <Button
                                    variant="contained"
                                    startIcon={<BackupIcon />}
                                    onClick={handleCreateBackup}
                                    fullWidth
                                >
                                    バックアップ作成
                                </Button>

                                <input
                                    type="file"
                                    accept=".json"
                                    onChange={handleRestoreBackup}
                                    style={{ display: 'none' }}
                                    id="restore-backup-input"
                                />
                                <label htmlFor="restore-backup-input">
                                    <Button
                                        variant="outlined"
                                        startIcon={<RestoreIcon />}
                                        component="span"
                                        fullWidth
                                    >
                                        バックアップから復元
                                    </Button>
                                </label>

                                <Button
                                    variant="outlined"
                                    startIcon={<DownloadIcon />}
                                    onClick={() => {
                                        const dataStr = onExportData?.();
                                        const blob = new Blob([dataStr], { type: 'application/json' });
                                        saveAs(blob, `aoba-data-${new Date().toISOString().split('T')[0]}.json`);
                                    }}
                                    fullWidth
                                >
                                    データエクスポート
                                </Button>
                            </Box>
                        </CardContent>
                    </Card>
                </Grid>

                <Grid item xs={12} md={6}>
                    <Card>
                        <CardContent>
                            <Typography variant="h6" sx={{ mb: 2 }}>データ削除</Typography>

                            <Alert severity="warning" sx={{ mb: 2 }}>
                                以下の操作は取り消すことができません。実行前に必ずバックアップを作成してください。
                            </Alert>

                            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                                <Button
                                    variant="outlined"
                                    color="error"
                                    startIcon={<DeleteIcon />}
                                    onClick={handleClearAllData}
                                    fullWidth
                                >
                                    すべてのデータを削除
                                </Button>

                                <Typography variant="caption" color="text.secondary">
                                    ※ この操作により、利用者データ、メニュー履歴、統計データがすべて削除されます。
                                </Typography>
                            </Box>
                        </CardContent>
                    </Card>
                </Grid>

                <Grid item xs={12}>
                    <Card>
                        <CardContent>
                            <Typography variant="h6" sx={{ mb: 2 }}>データ統計</Typography>

                            <Grid container spacing={2}>
                                <Grid item xs={6} sm={3}>
                                    <Paper sx={{ p: 2, textAlign: 'center' }}>
                                        <Typography variant="h4" color="primary">
                                            {appData?.users?.length || 0}
                                        </Typography>
                                        <Typography variant="body2">利用者数</Typography>
                                    </Paper>
                                </Grid>

                                <Grid item xs={6} sm={3}>
                                    <Paper sx={{ p: 2, textAlign: 'center' }}>
                                        <Typography variant="h4" color="secondary">
                                            {appData?.mealHistory?.length || 0}
                                        </Typography>
                                        <Typography variant="body2">給食記録数</Typography>
                                    </Paper>
                                </Grid>

                                <Grid item xs={6} sm={3}>
                                    <Paper sx={{ p: 2, textAlign: 'center' }}>
                                        <Typography variant="h4" color="success.main">
                                            {Math.round((appData?.mealHistory?.reduce((sum: number, record: any) => sum + (record.rating || 0), 0) || 0) / (appData?.mealHistory?.length || 1) * 10) / 10}
                                        </Typography>
                                        <Typography variant="body2">平均評価</Typography>
                                    </Paper>
                                </Grid>

                                <Grid item xs={6} sm={3}>
                                    <Paper sx={{ p: 2, textAlign: 'center' }}>
                                        <Typography variant="h4" color="info.main">
                                            {new Date().toLocaleDateString('ja-JP').split('/')[1]}
                                        </Typography>
                                        <Typography variant="body2">今月</Typography>
                                    </Paper>
                                </Grid>
                            </Grid>
                        </CardContent>
                    </Card>
                </Grid>
            </Grid>
        </Box>
    );

    const renderDisplayTab = () => (
        <Box>
            <Typography variant="h6" sx={{ mb: 3 }}>
                <PaletteIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                表示設定
            </Typography>

            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 3 }}>
                <Box sx={{ flex: '1 1 400px', minWidth: '400px' }}>
                    <Card>
                        <CardContent>
                            <Typography variant="h6" sx={{ mb: 2 }}>テーマ・外観</Typography>

                            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                                <FormControl fullWidth>
                                    <InputLabel>テーマ</InputLabel>
                                    <Select
                                        value={displaySettings.theme}
                                        onChange={(e) => setDisplaySettings(prev => ({
                                            ...prev,
                                            theme: e.target.value as DisplaySettings['theme']
                                        }))}
                                        label="テーマ"
                                    >
                                        <MenuItem value="light">ライト</MenuItem>
                                        <MenuItem value="dark">ダーク</MenuItem>
                                        <MenuItem value="high-contrast">ハイコントラスト</MenuItem>
                                    </Select>
                                </FormControl>

                                <FormControl fullWidth>
                                    <InputLabel>文字サイズ</InputLabel>
                                    <Select
                                        value={displaySettings.fontSize}
                                        onChange={(e) => setDisplaySettings(prev => ({
                                            ...prev,
                                            fontSize: e.target.value as DisplaySettings['fontSize']
                                        }))}
                                        label="文字サイズ"
                                    >
                                        <MenuItem value="small">小</MenuItem>
                                        <MenuItem value="medium">標準</MenuItem>
                                        <MenuItem value="large">大</MenuItem>
                                        <MenuItem value="xl">特大</MenuItem>
                                    </Select>
                                </FormControl>

                                <FormControl fullWidth>
                                    <InputLabel>言語</InputLabel>
                                    <Select
                                        value={displaySettings.language}
                                        onChange={(e) => setDisplaySettings(prev => ({
                                            ...prev,
                                            language: e.target.value as DisplaySettings['language']
                                        }))}
                                        label="言語"
                                    >
                                        <MenuItem value="ja">日本語</MenuItem>
                                        <MenuItem value="en">English (今後対応予定)</MenuItem>
                                    </Select>
                                </FormControl>
                            </Box>
                        </CardContent>
                    </Card>
                </Box>

                <Box sx={{ flex: '1 1 400px', minWidth: '400px' }}>
                    <Card>
                        <CardContent>
                            <Typography variant="h6" sx={{ mb: 2 }}>動作設定</Typography>

                            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                                <FormControlLabel
                                    control={
                                        <Switch
                                            checked={displaySettings.enableSounds}
                                            onChange={(e) => setDisplaySettings(prev => ({
                                                ...prev,
                                                enableSounds: e.target.checked
                                            }))}
                                        />
                                    }
                                    label={
                                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                                            <VolumeIcon sx={{ mr: 1 }} />
                                            効果音を有効にする
                                        </Box>
                                    }
                                />

                                <FormControlLabel
                                    control={
                                        <Switch
                                            checked={displaySettings.enableAnimations}
                                            onChange={(e) => setDisplaySettings(prev => ({
                                                ...prev,
                                                enableAnimations: e.target.checked
                                            }))}
                                        />
                                    }
                                    label="アニメーションを有効にする"
                                />

                                <FormControlLabel
                                    control={
                                        <Switch
                                            checked={displaySettings.compactMode}
                                            onChange={(e) => setDisplaySettings(prev => ({
                                                ...prev,
                                                compactMode: e.target.checked
                                            }))}
                                        />
                                    }
                                    label="コンパクト表示モード"
                                />
                            </Box>

                            <Alert severity="info" sx={{ mt: 2 }}>
                                表示設定の変更は即座に適用されます。
                            </Alert>
                        </CardContent>
                    </Card>
                </Box>
            </Box>
        </Box>
    );

    return (
        <Box sx={{ p: 3 }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
                <Box sx={{ display: 'flex', alignItems: 'center' }}>
                    {onBack && (
                        <Button
                            variant="outlined"
                            onClick={onBack}
                            sx={{ mr: 2 }}
                        >
                            ← 戻る
                        </Button>
                    )}
                    <Typography variant="h4">
                        <SettingsIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                        設定
                    </Typography>
                </Box>

                <Button
                    variant="contained"
                    startIcon={<SaveIcon />}
                    onClick={handleSaveSettings}
                    size="large"
                >
                    設定を保存
                </Button>
            </Box>

            <Tabs value={tabValue} onChange={(_, newValue) => setTabValue(newValue)} sx={{ mb: 3 }}>
                <Tab label="事業所情報" />
                <Tab label="グループ設定" />
                <Tab label="料金設定" />
                <Tab label="セキュリティ" />
                <Tab label="データ管理" />
                <Tab label="表示設定" />
            </Tabs>

            <TabPanel value={tabValue} index={0}>
                {renderFacilityTab()}
            </TabPanel>

            <TabPanel value={tabValue} index={1}>
                {renderGroupTab()}
            </TabPanel>

            <TabPanel value={tabValue} index={2}>
                {renderPriceTab()}
            </TabPanel>

            <TabPanel value={tabValue} index={3}>
                {renderSecurityTab()}
            </TabPanel>

            <TabPanel value={tabValue} index={4}>
                {renderDataTab()}
            </TabPanel>

            <TabPanel value={tabValue} index={5}>
                {renderDisplayTab()}
            </TabPanel>

            {/* Password Change Dialog */}
            <Dialog open={passwordDialog.open} onClose={() => setPasswordDialog({ ...passwordDialog, open: false })}>
                <DialogTitle>管理者パスワード変更</DialogTitle>
                <DialogContent>
                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, pt: 1, minWidth: 300 }}>
                        <TextField
                            label="現在のパスワード"
                            type={showPassword ? 'text' : 'password'}
                            value={passwordDialog.currentPassword}
                            onChange={(e) => setPasswordDialog(prev => ({ ...prev, currentPassword: e.target.value }))}
                            InputProps={{
                                endAdornment: (
                                    <IconButton onClick={() => setShowPassword(!showPassword)}>
                                        {showPassword ? <VisibilityOffIcon /> : <VisibilityIcon />}
                                    </IconButton>
                                )
                            }}
                            fullWidth
                        />

                        <TextField
                            label="新しいパスワード"
                            type={showPassword ? 'text' : 'password'}
                            value={passwordDialog.newPassword}
                            onChange={(e) => setPasswordDialog(prev => ({ ...prev, newPassword: e.target.value }))}
                            fullWidth
                        />

                        <TextField
                            label="新しいパスワード（確認）"
                            type={showPassword ? 'text' : 'password'}
                            value={passwordDialog.confirmPassword}
                            onChange={(e) => setPasswordDialog(prev => ({ ...prev, confirmPassword: e.target.value }))}
                            fullWidth
                        />
                    </Box>
                </DialogContent>
                <DialogActions>
                    <Button onClick={() => setPasswordDialog({ ...passwordDialog, open: false })}>
                        キャンセル
                    </Button>
                    <Button onClick={handlePasswordChange} variant="contained">
                        変更
                    </Button>
                </DialogActions>
            </Dialog>

            {/* Snackbar */}
            <Snackbar
                open={snackbar.open}
                autoHideDuration={6000}
                onClose={() => setSnackbar({ ...snackbar, open: false })}
            >
                <Alert
                    onClose={() => setSnackbar({ ...snackbar, open: false })}
                    severity={snackbar.severity}
                    sx={{ width: '100%' }}
                >
                    {snackbar.message}
                </Alert>
            </Snackbar>
        </Box>
    );
};

export default Settings; 