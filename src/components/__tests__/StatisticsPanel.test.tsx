import { ThemeProvider } from '@mui/material';
import { fireEvent, render, screen, waitFor } from '@testing-library/react';
import React from 'react';
import { AppProvider } from '../../contexts/AppContext';
import aobaTheme from '../../theme';
import {
    createMockMealRecord,
    generateMockMealRecords,
    mockUsers
} from '../../utils/testHelpers';
import StatisticsPanel from '../StatisticsPanel';

// „É¢„ÉÉ„ÇØÈñ¢Êï∞
const mockOnBack = jest.fn();
const mockMealRecords = generateMockMealRecords(mockUsers, 10);

// „ÉÜ„Çπ„Éà„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£
const renderWithProviders = (component: React.ReactElement) => {
    return render(
        <ThemeProvider theme={aobaTheme}>
            <AppProvider>
                {component}
            </AppProvider>
        </ThemeProvider>
    );
};

// LocalStorage„ÅÆ„É¢„ÉÉ„ÇØ
const mockLocalStorage = {
    getItem: jest.fn(),
    setItem: jest.fn(),
};

Object.defineProperty(window, 'localStorage', {
    value: mockLocalStorage,
});

// file-saver„ÅÆ„É¢„ÉÉ„ÇØ„ÅØ‰∏çË¶ÅÔºàCSVÂá∫ÂäõÊ©üËÉΩ„ÅåÁÑ°ÂäπÂåñ„Åï„Çå„Å¶„ÅÑ„Çã„Åü„ÇÅÔºâ

describe('StatisticsPanel', () => {
    beforeEach(() => {
        jest.clearAllMocks();
        mockLocalStorage.getItem.mockReturnValue(JSON.stringify({
            users: mockUsers,
            mealRecords: mockMealRecords,
            currentMenu: null,
            selectedUser: null,
            currentView: 'statistics',
        }));
    });

    describe('Âü∫Êú¨Ë°®Á§∫', () => {
        it('Áµ±Ë®à„Éë„Éç„É´„ÅåÊ≠£„Åó„Åè„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Åï„Çå„Çã', async () => {
            renderWithProviders(<StatisticsPanel onBack={mockOnBack} />);

            expect(await screen.findByText('üìä Áµ±Ë®à„ÉªÂàÜÊûê')).toBeInTheDocument();
            expect(screen.getByText('Êõ¥Êñ∞')).toBeInTheDocument();
            expect(screen.getByText('CSVÂá∫Âäõ')).toBeInTheDocument();
        });

        it('‰ªäÊó•„ÅÆÁµ±Ë®à„Ç´„Éº„Éâ„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
            renderWithProviders(<StatisticsPanel onBack={mockOnBack} />);

            expect(await screen.findByText('üìà ‰ªäÊó•„ÅÆÁä∂Ê≥Å')).toBeInTheDocument();
            expect(screen.getByText('Ê≥®ÊñáÊï∞')).toBeInTheDocument();
            expect(screen.getByText('Ë©ï‰æ°ÂæÖ„Å°')).toBeInTheDocument();
            expect(screen.getByText('Ë©ï‰æ°ÂÆå‰∫Ü')).toBeInTheDocument();
            expect(screen.getByText('Âπ≥ÂùáË©ï‰æ°')).toBeInTheDocument();
        });

        it('ÊúüÈñì„Çµ„Éû„É™„Éº„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
            renderWithProviders(<StatisticsPanel onBack={mockOnBack} />);

            expect(await screen.findByText('üìã ÊúüÈñì„Çµ„Éû„É™„Éº')).toBeInTheDocument();
            expect(screen.getByText('Âà©Áî®ËÄÖÊï∞')).toBeInTheDocument();
            expect(screen.getByText('Á∑èÊ≥®ÊñáÊï∞')).toBeInTheDocument();
            expect(screen.getByText('Á∑èÂ£≤‰∏ä')).toBeInTheDocument();
            expect(screen.getAllByText('Âπ≥ÂùáË©ï‰æ°').length).toBeGreaterThan(0);
        });

        it('„Ç∞„É©„Éï„Çª„ÇØ„Ç∑„Éß„É≥„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
            renderWithProviders(<StatisticsPanel onBack={mockOnBack} />);

            expect(await screen.findByText('üìà Êó•Âà•Ê≥®Êñá„ÉªË©ï‰æ°Êé®Áßª')).toBeInTheDocument();
            expect(screen.getByText('‚≠ê Ë©ï‰æ°ÂàÜÂ∏É')).toBeInTheDocument();
            expect(screen.getByText('üçΩÔ∏è „É°„Éã„É•„Éº‰∫∫Ê∞óÂ∫¶')).toBeInTheDocument();
            expect(screen.getByText('üìä ÊúàÂà•„Éà„É¨„É≥„Éâ')).toBeInTheDocument();
        });
    });

    describe.skip('„Éá„Éº„Çø„Éï„Ç£„É´„Çø„É™„É≥„Ç∞', () => {
        // ÊúüÈñì„Éï„Ç£„É´„Çø„ÉºÊ©üËÉΩ„ÅØ‰∏ÄÊôÇÁöÑ„Å´ÁÑ°ÂäπÂåñ„Åï„Çå„Å¶„ÅÑ„Çã„Åü„ÇÅ„ÉÜ„Çπ„Éà„Çí„Çπ„Ç≠„ÉÉ„Éó
        it('Êó•‰ªòÁØÑÂõ≤„Éï„Ç£„É´„Çø„Éº„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
            renderWithProviders(<StatisticsPanel onBack={mockOnBack} />);

            expect(screen.getByText('ÊúüÈñì„Éï„Ç£„É´„Çø„Éº')).toBeInTheDocument();
            expect(screen.getByText('‰ªäÊó•')).toBeInTheDocument();
            expect(screen.getByText('‰ªäÈÄ±')).toBeInTheDocument();
            expect(screen.getByText('‰ªäÊúà')).toBeInTheDocument();
        });

        it('ÊúüÈñì„Éó„É™„Çª„ÉÉ„Éà„Éú„Çø„É≥„ÅåÊ©üËÉΩ„Åô„Çã', async () => {
            renderWithProviders(<StatisticsPanel onBack={mockOnBack} />);

            const todayButton = screen.getByText('‰ªäÊó•');
            fireEvent.click(todayButton);

            // „Éï„Ç£„É´„Çø„ÉºÈÅ©Áî®Âæå„ÅÆÂ§âÂåñ„ÇíÁ¢∫Ë™ç
            await waitFor(() => {
                // ‰ªäÊó•„ÅÆ„Éá„Éº„Çø„ÅÆ„Åø„Å´Áµû„Çâ„Çå„Çã„Åì„Å®„ÇíÊÉ≥ÂÆö
                expect(screen.getByText('üìà ‰ªäÊó•„ÅÆÁä∂Ê≥Å')).toBeInTheDocument();
            });
        });

        it('„Ç´„Çπ„Çø„É†Êó•‰ªòÁØÑÂõ≤„ÇíË®≠ÂÆö„Åß„Åç„Çã', async () => {
            renderWithProviders(<StatisticsPanel onBack={mockOnBack} />);

            // ÈñãÂßãÊó•„ÅÆË®≠ÂÆö
            const startDateInput = screen.getByLabelText('ÈñãÂßãÊó•');
            fireEvent.change(startDateInput, { target: { value: '2024-01-01' } });

            // ÁµÇ‰∫ÜÊó•„ÅÆË®≠ÂÆö
            const endDateInput = screen.getByLabelText('ÁµÇ‰∫ÜÊó•');
            fireEvent.change(endDateInput, { target: { value: '2024-01-31' } });

            // „Éï„Ç£„É´„Çø„ÉºÈÅ©Áî®
            const applyButton = screen.getByText('ÈÅ©Áî®');
            fireEvent.click(applyButton);

            await waitFor(() => {
                // „Ç´„Çπ„Çø„É†ÊúüÈñì„Åß„ÅÆ„Éá„Éº„ÇøË°®Á§∫„ÇíÁ¢∫Ë™ç
                expect(screen.getByText('üìã ÊúüÈñì„Çµ„Éû„É™„Éº')).toBeInTheDocument();
            });
        });
    });

    describe('„Éá„Éº„ÇøÊõ¥Êñ∞Ê©üËÉΩ', () => {
        it('Êõ¥Êñ∞„Éú„Çø„É≥„ÅåÊ©üËÉΩ„Åô„Çã', async () => {
            renderWithProviders(<StatisticsPanel onBack={mockOnBack} />);

            const refreshButton = screen.getByText('Êõ¥Êñ∞');
            fireEvent.click(refreshButton);

            // Áµ±Ë®à„Éá„Éº„Çø„ÅåÂÜçË®àÁÆó„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
            await waitFor(() => {
                expect(screen.getByText('üìà ‰ªäÊó•„ÅÆÁä∂Ê≥Å')).toBeInTheDocument();
            });
        });

        it('„Éá„Éº„ÇøÂ§âÊõ¥ÊôÇ„Å´Ëá™ÂãïÊõ¥Êñ∞„Åï„Çå„Çã', async () => {
            const { rerender } = renderWithProviders(<StatisticsPanel onBack={mockOnBack} />);

            // Êñ∞„Åó„ÅÑ„Éá„Éº„Çø„Åß„É¢„ÉÉ„ÇØ„ÇíÊõ¥Êñ∞
            const newMealRecords = [
                ...mockMealRecords,
                createMockMealRecord({ rating: 9, price: 600 }),
            ];

            mockLocalStorage.getItem.mockReturnValue(JSON.stringify({
                users: mockUsers,
                mealRecords: newMealRecords,
                currentMenu: null,
                selectedUser: null,
                currentView: 'statistics',
            }));

            // ÂÜç„É¨„É≥„ÉÄ„É™„É≥„Ç∞
            rerender(<StatisticsPanel onBack={mockOnBack} />);

            await waitFor(() => {
                // Áµ±Ë®à„ÅåÊõ¥Êñ∞„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
                expect(screen.getByText('üìã ÊúüÈñì„Çµ„Éû„É™„Éº')).toBeInTheDocument();
            });
        });
    });

    describe('CSVÂá∫ÂäõÊ©üËÉΩ', () => {
        it('CSVÂá∫Âäõ„Éú„Çø„É≥„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
            renderWithProviders(<StatisticsPanel onBack={mockOnBack} />);

            const exportButton = screen.getByText('CSVÂá∫Âäõ');
            expect(exportButton).toBeInTheDocument();
        });

        it('CSVÂá∫Âäõ„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åô„Çã„Å®„Ç¢„É©„Éº„Éà„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
            // window.alert„Çí„É¢„ÉÉ„ÇØ
            const alertSpy = jest.spyOn(window, 'alert').mockImplementation(() => { });

            renderWithProviders(<StatisticsPanel onBack={mockOnBack} />);

            const exportButton = screen.getByText('CSVÂá∫Âäõ');
            fireEvent.click(exportButton);

            expect(alertSpy).toHaveBeenCalledWith('CSVÂá∫ÂäõÊ©üËÉΩ„ÅØ‰∏ÄÊôÇÁöÑ„Å´ÁÑ°ÂäπÂåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô');

            alertSpy.mockRestore();
        });
    });

    describe('„Ç∞„É©„ÉïË°®Á§∫', () => {
        it('Êó•Âà•Êé®Áßª„Ç∞„É©„Éï„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
            renderWithProviders(<StatisticsPanel onBack={mockOnBack} />);
            const chartContainer = await screen.findByRole('region', { name: /Êó•Âà•Ê≥®Êñá„ÉªË©ï‰æ°Êé®Áßª/i });
            expect(chartContainer).toBeInTheDocument();
        });

        it('Ë©ï‰æ°ÂàÜÂ∏É„Ç∞„É©„Éï„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
            renderWithProviders(<StatisticsPanel onBack={mockOnBack} />);
            const chartContainer = await screen.findByRole('region', { name: /Ë©ï‰æ°ÂàÜÂ∏É/i });
            expect(chartContainer).toBeInTheDocument();
        });

        it('„É°„Éã„É•„Éº‰∫∫Ê∞óÂ∫¶„Ç∞„É©„Éï„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
            renderWithProviders(<StatisticsPanel onBack={mockOnBack} />);
            const chartContainer = await screen.findByRole('region', { name: /„É°„Éã„É•„Éº‰∫∫Ê∞óÂ∫¶/i });
            expect(chartContainer).toBeInTheDocument();
        });

        it('ÊúàÂà•„Éà„É¨„É≥„Éâ„Ç∞„É©„Éï„ÅåË°®Á§∫„Åï„Çå„Çã', async () => {
            renderWithProviders(<StatisticsPanel onBack={mockOnBack} />);
            const chartContainer = await screen.findByRole('region', { name: /ÊúàÂà•„Éà„É¨„É≥„Éâ/i });
            expect(chartContainer).toBeInTheDocument();
        });
    });
}); 