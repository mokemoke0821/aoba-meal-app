import { AppState } from '../types';
// import { validateDataIntegrity, validateMealRecord, validateUser, ValidationResult } from './dataValidator';

export interface StorageResult<T> {
    success: boolean;
    data?: T;
    error?: string;
    warning?: string;
}

export interface BackupMetadata {
    timestamp: string;
    version: string;
    userCount: number;
    recordCount: number;
    checksum: string;
}

export interface StorageConfig {
    maxBackups: number;
    compressionEnabled: boolean;
    encryptionEnabled: boolean;
    autoBackupInterval: number; // minutes
}

class StorageManager {
    private readonly CONFIG_KEY = 'aobaStorageConfig';
    private readonly DATA_KEY = 'aobaAppData';
    private readonly BACKUP_PREFIX = 'aobaBackup_';
    private readonly ERROR_LOG_KEY = 'aobaErrorLogs';
    private readonly VALIDATION_LOG_KEY = 'aobaValidationLogs';

    private defaultConfig: StorageConfig = {
        maxBackups: 5,
        compressionEnabled: false,
        encryptionEnabled: false,
        autoBackupInterval: 60, // 1時間
    };

    private config: StorageConfig;

    constructor() {
        this.config = this.loadConfig();
        this.startAutoBackup();
    }

    /**
     * 設定の読み込み
     */
    private loadConfig(): StorageConfig {
        try {
            const stored = localStorage.getItem(this.CONFIG_KEY);
            if (stored) {
                const parsed = JSON.parse(stored);
                return { ...this.defaultConfig, ...parsed };
            }
        } catch (error) {
            console.warn('設定の読み込みに失敗しました。デフォルト設定を使用します:', error);
        }
        return this.defaultConfig;
    }

    /**
     * 設定の保存
     */
    private saveConfig(): void {
        try {
            localStorage.setItem(this.CONFIG_KEY, JSON.stringify(this.config));
        } catch (error) {
            console.error('設定の保存に失敗しました:', error);
        }
    }

    /**
     * ストレージ容量チェック
     */
    private checkStorageQuota(): { available: number; used: number; total: number } {
        let used = 0;
        let total = 0;

        try {
            // 使用量計算
            for (let key in localStorage) {
                if (localStorage.hasOwnProperty(key)) {
                    used += localStorage.getItem(key)?.length || 0;
                }
            }

            // 総容量推定（5MB-10MB程度）
            total = 5 * 1024 * 1024; // 5MB

            return {
                used,
                total,
                available: total - used,
            };
        } catch (error) {
            console.error('ストレージ容量の確認に失敗しました:', error);
            return { used: 0, total: 0, available: 0 };
        }
    }

    /**
     * チェックサム計算
     */
    private calculateChecksum(data: string): string {
        let hash = 0;
        for (let i = 0; i < data.length; i++) {
            const char = data.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // 32bit integer
        }
        return hash.toString(16);
    }

    /**
     * データの圧縮（簡易版）
     */
    private compressData(data: string): string {
        if (!this.config.compressionEnabled) {
            return data;
        }

        try {
            // 簡易的な圧縮：重複文字列の置換
            const patterns = [
                ['"userId":', '"uid":'],
                ['"userName":', '"un":'],
                ['"userGroup":', '"ug":'],
                ['"mealRecords":', '"mr":'],
                ['"createdAt":', '"ca":'],
                ['"updatedAt":', '"ua":'],
            ];

            let compressed = data;
            patterns.forEach(([original, replacement]) => {
                compressed = compressed.replace(new RegExp(original, 'g'), replacement);
            });

            return compressed;
        } catch (error) {
            console.warn('データ圧縮に失敗しました。元のデータを使用します:', error);
            return data;
        }
    }

    /**
     * データの展開
     */
    private decompressData(data: string): string {
        if (!this.config.compressionEnabled) {
            return data;
        }

        try {
            // 圧縮の逆変換
            const patterns = [
                ['"uid":', '"userId":'],
                ['"un":', '"userName":'],
                ['"ug":', '"userGroup":'],
                ['"mr":', '"mealRecords":'],
                ['"ca":', '"createdAt":'],
                ['"ua":', '"updatedAt":'],
            ];

            let decompressed = data;
            patterns.forEach(([compressed, original]) => {
                decompressed = decompressed.replace(new RegExp(compressed, 'g'), original);
            });

            return decompressed;
        } catch (error) {
            console.warn('データ展開に失敗しました。元のデータを使用します:', error);
            return data;
        }
    }

    /**
     * データの暗号化（簡易版）
     */
    private encryptData(data: string): string {
        if (!this.config.encryptionEnabled) {
            return data;
        }

        try {
            // 簡易的なXOR暗号化
            const key = 'aobaFoodService2024';
            let encrypted = '';

            for (let i = 0; i < data.length; i++) {
                encrypted += String.fromCharCode(
                    data.charCodeAt(i) ^ key.charCodeAt(i % key.length)
                );
            }

            return btoa(encrypted); // Base64エンコード
        } catch (error) {
            console.warn('データ暗号化に失敗しました。元のデータを使用します:', error);
            return data;
        }
    }

    /**
     * データの復号化
     */
    private decryptData(data: string): string {
        if (!this.config.encryptionEnabled) {
            return data;
        }

        try {
            const encrypted = atob(data); // Base64デコード
            const key = 'aobaFoodService2024';
            let decrypted = '';

            for (let i = 0; i < encrypted.length; i++) {
                decrypted += String.fromCharCode(
                    encrypted.charCodeAt(i) ^ key.charCodeAt(i % key.length)
                );
            }

            return decrypted;
        } catch (error) {
            console.warn('データ復号化に失敗しました。元のデータを使用します:', error);
            return data;
        }
    }

    /**
     * 安全にデータを保存
     */
    saveData(data: AppState): StorageResult<void> {
        try {
            // データ検証
            const validation = this.validateAppState(data);
            if (!validation.isValid) {
                this.logValidation('保存前検証エラー', validation);
                return {
                    success: false,
                    error: `データ検証エラー: ${validation.errors.join(', ')}`,
                };
            }

            // ストレージ容量チェック
            const quota = this.checkStorageQuota();
            const dataString = JSON.stringify(data);

            if (quota.available < dataString.length * 2) { // 余裕を持って2倍チェック
                this.cleanupOldData();
            }

            // データ処理
            let processedData = dataString;
            processedData = this.compressData(processedData);
            processedData = this.encryptData(processedData);

            // 保存実行
            localStorage.setItem(this.DATA_KEY, processedData);

            // バックアップ作成
            this.createBackup(data);

            // 保存ログ
            this.logOperation('データ保存成功', {
                userCount: data.users.length,
                recordCount: data.mealRecords.length,
                dataSize: dataString.length,
            });

            return { success: true };

        } catch (error) {
            const errorMessage = error instanceof Error ? error.message : '不明なエラー';

            this.logError('データ保存エラー', error as Error);

            if (errorMessage.includes('QuotaExceededError') || errorMessage.includes('quota')) {
                return {
                    success: false,
                    error: 'ストレージ容量が不足しています。古いデータを削除してください。',
                };
            }

            return {
                success: false,
                error: `データの保存に失敗しました: ${errorMessage}`,
            };
        }
    }

    /**
     * 安全にデータを読み込み
     */
    loadData(): StorageResult<AppState> {
        try {
            const stored = localStorage.getItem(this.DATA_KEY);

            if (!stored) {
                return {
                    success: true,
                    data: this.getDefaultAppState(),
                    warning: '保存されたデータがありません。初期データを使用します。',
                };
            }

            // データ処理
            let processedData = stored;
            processedData = this.decryptData(processedData);
            processedData = this.decompressData(processedData);

            const parsed: AppState = JSON.parse(processedData);

            // データ検証
            const validation = this.validateAppState(parsed);
            if (!validation.isValid) {
                this.logValidation('読み込み後検証エラー', validation);

                // バックアップからの復旧を試行
                const backupResult = this.restoreFromBackup();
                if (backupResult.success && backupResult.data) {
                    return {
                        success: true,
                        data: backupResult.data,
                        warning: 'メインデータに問題があったため、バックアップから復旧しました。',
                    };
                }

                return {
                    success: false,
                    error: `データ検証エラー: ${validation.errors.join(', ')}`,
                };
            }

            // 読み込みログ
            this.logOperation('データ読み込み成功', {
                userCount: parsed.users.length,
                recordCount: parsed.mealRecords.length,
            });

            return { success: true, data: parsed };

        } catch (error) {
            this.logError('データ読み込みエラー', error as Error);

            // バックアップからの復旧を試行
            const backupResult = this.restoreFromBackup();
            if (backupResult.success && backupResult.data) {
                return {
                    success: true,
                    data: backupResult.data,
                    warning: 'メインデータの読み込みに失敗したため、バックアップから復旧しました。',
                };
            }

            return {
                success: false,
                error: `データの読み込みに失敗しました: ${error instanceof Error ? error.message : '不明なエラー'}`,
            };
        }
    }

    /**
     * バックアップ作成
     */
    private createBackup(data: AppState): void {
        try {
            const timestamp = new Date().toISOString();
            const dataString = JSON.stringify(data);

            const metadata: BackupMetadata = {
                timestamp,
                version: '1.0',
                userCount: data.users.length,
                recordCount: data.mealRecords.length,
                checksum: this.calculateChecksum(dataString),
            };

            const backupData = {
                metadata,
                data,
            };

            const backupKey = `${this.BACKUP_PREFIX}${timestamp}`;
            let processedBackup = JSON.stringify(backupData);
            processedBackup = this.compressData(processedBackup);

            localStorage.setItem(backupKey, processedBackup);

            // 古いバックアップを削除
            this.cleanupOldBackups();

        } catch (error) {
            console.warn('バックアップ作成に失敗しました:', error);
        }
    }

    /**
     * バックアップからの復旧
     */
    private restoreFromBackup(): StorageResult<AppState> {
        try {
            const backupKeys = Object.keys(localStorage)
                .filter(key => key.startsWith(this.BACKUP_PREFIX))
                .sort()
                .reverse(); // 新しい順

            for (const backupKey of backupKeys) {
                try {
                    const stored = localStorage.getItem(backupKey);
                    if (!stored) continue;

                    let processedData = this.decompressData(stored);
                    const backup = JSON.parse(processedData);

                    // バックアップデータの検証
                    const validation = this.validateAppState(backup.data);
                    if (validation.isValid) {
                        this.logOperation('バックアップ復旧成功', {
                            backupKey,
                            timestamp: backup.metadata.timestamp,
                        });

                        return { success: true, data: backup.data };
                    }

                } catch (error) {
                    console.warn(`バックアップ ${backupKey} の復旧に失敗:`, error);
                    continue;
                }
            }

            return {
                success: false,
                error: '有効なバックアップが見つかりませんでした',
            };

        } catch (error) {
            return {
                success: false,
                error: `バックアップ復旧中にエラーが発生: ${error instanceof Error ? error.message : '不明なエラー'}`,
            };
        }
    }

    /**
     * データ検証
     */
    private validateAppState(data: any): ValidationResult {
        const errors: string[] = [];
        const warnings: string[] = [];

        // 基本構造チェック
        if (!data || typeof data !== 'object') {
            errors.push('データが無効です');
            return { isValid: false, errors, warnings };
        }

        if (!Array.isArray(data.users)) {
            errors.push('ユーザーデータが配列ではありません');
        }

        if (!Array.isArray(data.mealRecords)) {
            errors.push('給食記録データが配列ではありません');
        }

        if (errors.length > 0) {
            return { isValid: false, errors, warnings };
        }

        // ユーザーデータの検証
        data.users.forEach((user: any, index: number) => {
            const userValidation = validateUser(user);
            errors.push(...userValidation.errors.map(err => `ユーザー[${index}]: ${err}`));
            warnings.push(...userValidation.warnings.map(warn => `ユーザー[${index}]: ${warn}`));
        });

        // 給食記録データの検証
        data.mealRecords.forEach((record: any, index: number) => {
            const recordValidation = validateMealRecord(record);
            errors.push(...recordValidation.errors.map(err => `給食記録[${index}]: ${err}`));
            warnings.push(...recordValidation.warnings.map(warn => `給食記録[${index}]: ${warn}`));
        });

        // データ整合性の検証
        const integrityValidation = validateDataIntegrity(data.users, data.mealRecords);
        errors.push(...integrityValidation.errors);
        warnings.push(...integrityValidation.warnings);

        return { isValid: errors.length === 0, errors, warnings };
    }

    /**
     * デフォルトの初期状態
     */
    private getDefaultAppState(): AppState {
        return {
            users: [],
            mealRecords: [],
            currentMenu: null,
            selectedUser: null,
            selectedCategory: null,
            currentView: 'categorySelect',
            requireAdminAuth: false,
        };
    }

    /**
     * 古いデータのクリーンアップ
     */
    private cleanupOldData(): void {
        try {
            // 古いバックアップを削除
            this.cleanupOldBackups();

            // 古いエラーログを削除
            const errorLogs = JSON.parse(localStorage.getItem(this.ERROR_LOG_KEY) || '[]');
            const recentErrorLogs = errorLogs.slice(0, 50); // 最新50件のみ保持
            localStorage.setItem(this.ERROR_LOG_KEY, JSON.stringify(recentErrorLogs));

            // 古い検証ログを削除
            const validationLogs = JSON.parse(localStorage.getItem(this.VALIDATION_LOG_KEY) || '[]');
            const recentValidationLogs = validationLogs.slice(0, 20); // 最新20件のみ保持
            localStorage.setItem(this.VALIDATION_LOG_KEY, JSON.stringify(recentValidationLogs));

        } catch (error) {
            console.warn('クリーンアップに失敗しました:', error);
        }
    }

    /**
     * 古いバックアップの削除
     */
    private cleanupOldBackups(): void {
        try {
            const backupKeys = Object.keys(localStorage)
                .filter(key => key.startsWith(this.BACKUP_PREFIX))
                .sort()
                .reverse();

            // 設定された数を超えるバックアップを削除
            if (backupKeys.length > this.config.maxBackups) {
                const toDelete = backupKeys.slice(this.config.maxBackups);
                toDelete.forEach(key => {
                    localStorage.removeItem(key);
                });
            }

        } catch (error) {
            console.warn('バックアップクリーンアップに失敗しました:', error);
        }
    }

    /**
     * エラーログ記録
     */
    private logError(operation: string, error: Error): void {
        try {
            const errorLog = {
                timestamp: new Date().toISOString(),
                operation,
                message: error.message,
                stack: error.stack,
                userAgent: navigator.userAgent,
            };

            const logs = JSON.parse(localStorage.getItem(this.ERROR_LOG_KEY) || '[]');
            logs.unshift(errorLog);
            localStorage.setItem(this.ERROR_LOG_KEY, JSON.stringify(logs.slice(0, 100)));

        } catch (logError) {
            console.error('エラーログの記録に失敗しました:', logError);
        }
    }

    /**
     * 操作ログ記録
     */
    private logOperation(operation: string, details: any): void {
        try {
            console.log(`[StorageManager] ${operation}:`, details);
        } catch (error) {
            console.warn('操作ログの記録に失敗しました:', error);
        }
    }

    /**
     * 検証ログ記録
     */
    private logValidation(operation: string, validation: ValidationResult): void {
        try {
            const validationLog = {
                timestamp: new Date().toISOString(),
                operation,
                errors: validation.errors,
                warnings: validation.warnings,
            };

            const logs = JSON.parse(localStorage.getItem(this.VALIDATION_LOG_KEY) || '[]');
            logs.unshift(validationLog);
            localStorage.setItem(this.VALIDATION_LOG_KEY, JSON.stringify(logs.slice(0, 50)));

            console.group(`[StorageManager] ${operation}`);
            if (validation.errors.length > 0) {
                console.error('Errors:', validation.errors);
            }
            if (validation.warnings.length > 0) {
                console.warn('Warnings:', validation.warnings);
            }
            console.groupEnd();

        } catch (error) {
            console.warn('検証ログの記録に失敗しました:', error);
        }
    }

    /**
     * 自動バックアップの開始
     */
    private startAutoBackup(): void {
        // 簡易的な実装：ページフォーカス時にバックアップチェック
        window.addEventListener('focus', () => {
            const lastBackup = localStorage.getItem('lastAutoBackup');
            const now = Date.now();
            const interval = this.config.autoBackupInterval * 60 * 1000;

            if (!lastBackup || (now - parseInt(lastBackup)) > interval) {
                const result = this.loadData();
                if (result.success && result.data) {
                    this.createBackup(result.data);
                    localStorage.setItem('lastAutoBackup', now.toString());
                }
            }
        });
    }

    /**
     * ストレージ統計情報の取得
     */
    getStorageStats(): {
        quota: { used: number; total: number; available: number };
        backupCount: number;
        errorLogCount: number;
        lastBackup: string | null;
    } {
        const quota = this.checkStorageQuota();
        const backupKeys = Object.keys(localStorage).filter(key => key.startsWith(this.BACKUP_PREFIX));
        const errorLogs = JSON.parse(localStorage.getItem(this.ERROR_LOG_KEY) || '[]');
        const lastBackup = localStorage.getItem('lastAutoBackup');

        return {
            quota,
            backupCount: backupKeys.length,
            errorLogCount: errorLogs.length,
            lastBackup: lastBackup ? new Date(parseInt(lastBackup)).toISOString() : null,
        };
    }

    /**
     * 設定の更新
     */
    updateConfig(newConfig: Partial<StorageConfig>): void {
        this.config = { ...this.config, ...newConfig };
        this.saveConfig();
    }

    /**
     * 全データのリセット
     */
    resetAllData(): StorageResult<void> {
        try {
            // メインデータ削除
            localStorage.removeItem(this.DATA_KEY);

            // バックアップ削除
            const backupKeys = Object.keys(localStorage).filter(key => key.startsWith(this.BACKUP_PREFIX));
            backupKeys.forEach(key => localStorage.removeItem(key));

            // ログ削除
            localStorage.removeItem(this.ERROR_LOG_KEY);
            localStorage.removeItem(this.VALIDATION_LOG_KEY);

            this.logOperation('全データリセット完了', {});

            return { success: true };

        } catch (error) {
            return {
                success: false,
                error: `データリセットに失敗しました: ${error instanceof Error ? error.message : '不明なエラー'}`,
            };
        }
    }
}

// シングルトンインスタンス
export const storageManager = new StorageManager(); 